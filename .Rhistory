) +
labs(
x = "Día del mes (1 - 31)",
y = "Hora del día (24 hrs)",
fill = "Temperatura (en grados Celcius)",
title = plot_title,
subtitle = NULL,
caption = plot_caption
) +
theme_minimal(
base_family = "title_font",#define la fuente para el texto principal
base_size = bts #tamaño base de los textos
) +
theme(
# Overall Plot
panel.grid = element_blank(),#elimina las líneas de la cuadrícula
legend.position = "bottom",
text = element_text(
margin = margin(0,0,0,0, "mm"),
colour = text_col,
lineheight = 0.3
),
plot.title.position = "plot",
plot.margin = margin(5,10,5,5, "mm"),
# Strips and Axes
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "mm"),
axis.text.x = element_text(
margin = margin(1,0,0,0, "mm"),
size = 0.3 * bts
),
axis.text.y = element_text(
margin = margin(0,1,0,0, "mm"),
size = 0.2 * bts
),
axis.title = element_text(
margin = margin(-2,0,0,0, "mm")
),
panel.spacing = unit(0.9, "mm"),
strip.text.x = element_text(
margin = margin(0,0,3,0, "mm"),
size = 1.2 * bts
),
strip.text.y = element_text(
margin = margin(0,0,0,3, "mm"),
angle = 0,
size = 0.8 * bts
),
# Labels
plot.title = element_text(
family = "title_font",
margin = margin(10,0,5,0, "mm"),
size = 1.75 * bts,
hjust = 0.5
),
plot.subtitle = element_text(
margin = margin(0,0,5,0, "mm"),
hjust = 0.5
),
plot.caption = element_textbox(
family = "caption_font",
hjust = 0.5,
margin = margin(-10,0,0,0, "mm"),
size = 0.6 * bts
),
# Legend
legend.title.position = "top",
legend.key.height = unit(5, "mm"),
legend.key.width = unit(70, "mm"),
legend.title = element_text(
margin = margin(-30,0,5,0, "mm"),
hjust = 0.5
),
legend.text = element_text(
margin = margin(2,0,0,0, "mm")
)
)
g <- df |>
#filter(año > 1998 & año < 2023) |>
ggplot(
mapping = aes(
x = day,
y = hora,
fill = temperature_2m_c #Los colores del gráfico representan la T°en grados Celsius.
)
) +
geom_tile( #Dibuja rectángulos (celdas)para representar valores
linewidth = 0.01,#grosor de bordes de celdas
colour = bg_col #usa el color de fondo definido prev como bg_col="white"
) +
# Scales and Coordinates
scale_x_continuous(
breaks = c(0, 10, 20, 30),#etiquetas cada 10 días
expand = expansion(0)#elimina espacio extra alrededor de los ejes
) +
scale_y_continuous(
expand = expansion(0),
breaks = seq(0, 24, 6)#etiquetas c/6 h
) +
paletteer::scale_fill_paletteer_c(#usa una escala de colores predefinida ("Temp")
"grDevices::Temps",#para representar la temperatura
# "ggthemes::Red-Green-Gold Diverging",
direction = 1,#la escala va de frio a caliente
breaks = seq(0, 50, 10)#intervalos de temperatura en múltiplos de 10
) +
facet_grid(#divide el gráfico en paneles por año (fila)y mes(columna)
año ~ mes,
scales = "free_x"#permite que el eje X se adapte a cada panel
) +
coord_cartesian(
clip = "off"#permite que los elementos fuera de los límites del gráfico sigan siendo visibles
) +
labs(
x = "Día del mes (1 - 31)",
y = "Hora del día (24 hrs)",
fill = "Temperatura (en grados Celcius)",
title = plot_title,
subtitle = NULL,
caption = plot_caption
) +
theme_minimal(
base_family = "title_font",#define la fuente para el texto principal
base_size = bts #tamaño base de los textos
) +
theme(
# Overall Plot
panel.grid = element_blank(),#elimina las líneas de la cuadrícula
legend.position = "bottom",
text = element_text(
margin = margin(0,0,0,0, "mm"),
colour = text_col,
lineheight = 0.3
),
plot.title.position = "plot",
plot.margin = margin(5,10,5,5, "mm"),
# Strips and Axes
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "mm"),
axis.text.x = element_text(
margin = margin(1,0,0,0, "mm"),
size = 0.3 * bts
),
axis.text.y = element_text(
margin = margin(0,1,0,0, "mm"),
size = 0.2 * bts
),
axis.title = element_text(
margin = margin(-2,0,0,0, "mm")
),
panel.spacing = unit(0.9, "mm"),
strip.text.x = element_text(
margin = margin(0,0,3,0, "mm"),
size = 1.2 * bts
),
strip.text.y = element_text(
margin = margin(0,0,0,3, "mm"),
angle = 0,
size = 0.8 * bts
),
# Labels
plot.title = element_text(
family = "title_font",
margin = margin(10,0,5,0, "mm"),
size = 1.75 * bts,
hjust = 0.5
),
plot.subtitle = element_text(
margin = margin(0,0,5,0, "mm"),
hjust = 0.5
),
plot.caption = element_textbox(
family = "caption_font",
hjust = 0.5,
margin = margin(-10,0,0,0, "mm"),
size = 0.6 * bts
),
# Legend
legend.title.position = "top",
legend.key.height = unit(5, "mm"),
legend.key.width = unit(70, "mm"),
legend.title = element_text(
margin = margin(-30,0,5,0, "mm"),
hjust = 0.5
),
legend.text = element_text(
margin = margin(2,0,0,0, "mm")
)
)
g <- df |>
#filter(año > 1998 & año < 2023) |>
ggplot(
mapping = aes(
x = day,
y = hora,
fill = temperature_2m_c #Los colores del gráfico representan la T°en grados Celsius.
)
) +
geom_tile( #Dibuja rectángulos (celdas)para representar valores
linewidth = 0.01,#grosor de bordes de celdas
colour = bg_col #usa el color de fondo definido prev como bg_col="white"
) +
# Scales and Coordinates
scale_x_continuous(
breaks = c(0, 10, 20, 30),#etiquetas cada 10 días
expand = expansion(0)#elimina espacio extra alrededor de los ejes
) +
scale_y_continuous(
expand = expansion(0),
breaks = seq(0, 24, 6)#etiquetas c/6 h
) +
paletteer::scale_fill_paletteer_c(#usa una escala de colores predefinida ("Temp")
"grDevices::Temps",#para representar la temperatura
# "ggthemes::Red-Green-Gold Diverging",
direction = 1,#la escala va de frio a caliente
breaks = seq(0, 50, 10)#intervalos de temperatura en múltiplos de 10
) +
facet_grid(#divide el gráfico en paneles por año (fila)y mes(columna)
año ~ mes,
scales = "free_x"#permite que el eje X se adapte a cada panel
) +
coord_cartesian(
clip = "off"#permite que los elementos fuera de los límites del gráfico sigan siendo visibles
) +
labs(
x = "Día del mes (1 - 31)",
y = "Hora del día (24 hrs)",
fill = "Temperatura (en grados Celcius)",
title = plot_title,
subtitle = NULL,
caption = plot_caption
) +
theme_minimal(
base_family = "title_font",#define la fuente para el texto principal
base_size = bts #tamaño base de los textos
) +
theme(
# Overall Plot
panel.grid = element_blank(),#elimina las líneas de la cuadrícula
legend.position = "bottom",
text = element_text(
margin = margin(0,0,0,0, "mm"),
colour = text_col,
lineheight = 0.3
),
plot.title.position = "plot",
plot.margin = margin(5,10,5,5, "mm"),
# Strips and Axes
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "mm"),
axis.text.x = element_text(
margin = margin(1,0,0,0, "mm"),
size = 0.3 * bts
),
axis.text.y = element_text(
margin = margin(0,1,0,0, "mm"),
size = 0.2 * bts
),
axis.title = element_text(
margin = margin(-2,0,0,0, "mm")
),
panel.spacing = unit(0.9, "mm"),
strip.text.x = element_text(
margin = margin(0,0,3,0, "mm"),
size = 1.2 * bts
),
strip.text.y = element_text(
margin = margin(0,0,0,3, "mm"),
angle = 0,
size = 0.8 * bts
),
# Labels
plot.title = element_text(
family = "title_font",
margin = margin(10,0,5,0, "mm"),
size = 1.75 * bts,
hjust = 0.5
),
plot.subtitle = element_text(
margin = margin(0,0,5,0, "mm"),
hjust = 0.5
),
plot.caption = element_textbox(
family = "caption_font",
hjust = 0.5,
margin = margin(-10,0,0,0, "mm"),
size = 0.6 * bts)
,
# Legend
legend.title.position = "top",
legend.key.height = unit(5, "mm"),
legend.key.width = unit(70, "mm"),
legend.title = element_text(
margin = margin(-30,0,5,0, "mm"),
hjust = 0.5
),
legend.text = element_text(
margin = margin(2,0,0,0, "mm")
)
)
library(ggtext)
g <- df |>
#filter(año > 1998 & año < 2023) |>
ggplot(
mapping = aes(
x = day,
y = hora,
fill = temperature_2m_c #Los colores del gráfico representan la T°en grados Celsius.
)
) +
geom_tile( #Dibuja rectángulos (celdas)para representar valores
linewidth = 0.01,#grosor de bordes de celdas
colour = bg_col #usa el color de fondo definido prev como bg_col="white"
) +
# Scales and Coordinates
scale_x_continuous(
breaks = c(0, 10, 20, 30),#etiquetas cada 10 días
expand = expansion(0)#elimina espacio extra alrededor de los ejes
) +
scale_y_continuous(
expand = expansion(0),
breaks = seq(0, 24, 6)#etiquetas c/6 h
) +
paletteer::scale_fill_paletteer_c(#usa una escala de colores predefinida ("Temp")
"grDevices::Temps",#para representar la temperatura
# "ggthemes::Red-Green-Gold Diverging",
direction = 1,#la escala va de frio a caliente
breaks = seq(0, 50, 10)#intervalos de temperatura en múltiplos de 10
) +
facet_grid(#divide el gráfico en paneles por año (fila)y mes(columna)
año ~ mes,
scales = "free_x"#permite que el eje X se adapte a cada panel
) +
coord_cartesian(
clip = "off"#permite que los elementos fuera de los límites del gráfico sigan siendo visibles
) +
labs(
x = "Día del mes (1 - 31)",
y = "Hora del día (24 hrs)",
fill = "Temperatura (en grados Celcius)",
title = plot_title,
subtitle = NULL,
caption = plot_caption
) +
theme_minimal(
base_family = "title_font",#define la fuente para el texto principal
base_size = bts #tamaño base de los textos
) +
theme(
# Overall Plot
panel.grid = element_blank(),#elimina las líneas de la cuadrícula
legend.position = "bottom",
text = element_text(
margin = margin(0,0,0,0, "mm"),
colour = text_col,
lineheight = 0.3
),
plot.title.position = "plot",
plot.margin = margin(5,10,5,5, "mm"),
# Strips and Axes
axis.ticks = element_blank(),
axis.ticks.length = unit(0, "mm"),
axis.text.x = element_text(
margin = margin(1,0,0,0, "mm"),
size = 0.3 * bts
),
axis.text.y = element_text(
margin = margin(0,1,0,0, "mm"),
size = 0.2 * bts
),
axis.title = element_text(
margin = margin(-2,0,0,0, "mm")
),
panel.spacing = unit(0.9, "mm"),
strip.text.x = element_text(
margin = margin(0,0,3,0, "mm"),
size = 1.2 * bts
),
strip.text.y = element_text(
margin = margin(0,0,0,3, "mm"),
angle = 0,
size = 0.8 * bts
),
# Labels
plot.title = element_text(
family = "title_font",
margin = margin(10,0,5,0, "mm"),
size = 1.75 * bts,
hjust = 0.5
),
plot.subtitle = element_text(
margin = margin(0,0,5,0, "mm"),
hjust = 0.5
),
plot.caption = element_textbox(
family = "caption_font",
hjust = 0.5,
margin = margin(-10,0,0,0, "mm"),
size = 0.6 * bts)
,
# Legend
legend.title.position = "top",
legend.key.height = unit(5, "mm"),
legend.key.width = unit(70, "mm"),
legend.title = element_text(
margin = margin(-30,0,5,0, "mm"),
hjust = 0.5
),
legend.text = element_text(
margin = margin(2,0,0,0, "mm")
)
)
g
ggsave(
filename = here::here("temperature", "sms_heatmap.png"),
plot = g,
width = 400,    # Best Twitter Aspect Ratio = 5:4
height = 500,
units = "mm",
bg = "white"
)
ggsave(
filename =("sms_heatmap.png"),
plot = g,
width = 400,    # Best Twitter Aspect Ratio = 5:4
height = 500,
units = "mm",
bg = "white"
)
ggsave(
filename =("SMS_heatmap.png"),
plot = g,
width = 210 * 2,    # Best Twitter Aspect Ratio = 5:4
height = 297 * 2,
units = "mm",
bg = "white"
)
df |>
#filter(año > 1998 & año < 2023) |>
ggplot(
mapping = aes(
x = day,
y = hora,
fill = temperature_2m_c #Los colores del gráfico representan la T°en grados Celsius.
)
) +
geom_tile( #Dibuja rectángulos (celdas)para representar valores
linewidth = 0.01,#grosor de bordes de celdas
colour = bg_col #usa el color de fondo definido prev como bg_col="white"
) +
# Scales and Coordinates
scale_x_continuous(
breaks = c(0, 10, 20, 30),#etiquetas cada 10 días
expand = expansion(0)#elimina espacio extra alrededor de los ejes
) +
scale_y_continuous(
expand = expansion(0),
breaks = seq(0, 24, 6)#etiquetas c/6 h
) +
paletteer::scale_fill_paletteer_c(#usa una escala de colores predefinida ("Temp")
"grDevices::Temps",#para representar la temperatura
# "ggthemes::Red-Green-Gold Diverging",
direction = 1,#la escala va de frio a caliente
breaks = seq(0, 50, 10)#intervalos de temperatura en múltiplos de 10
) +
facet_grid(#divide el gráfico en paneles por año (fila)y mes(columna)
año ~ mes,
scales = "free_x"#permite que el eje X se adapte a cada panel
) +
coord_cartesian(
clip = "off"#permite que los elementos fuera de los límites del gráfico sigan siendo visibles
) +
labs(
x = "Día del mes (1 - 31)",
y = "Hora del día (24 hrs)",
fill = "Temperatura (en grados Celcius)",
title = plot_title,
subtitle = NULL,
caption = plot_caption
) +
theme_minimal(
base_family = "title_font",#define la fuente para el texto principal
base_size = bts #tamaño base de los textos
)
warnings()
View(df)
library(paletteer)
paletteer::palettes_c_names
print.Date(n=.Last.value)
print.Date(n=...)
paletteer::palettes_c_names
print(n=...)
print(n=...)
print(n = ...)
setwd("C:/Users/biobl/Desktop/RStudio/DATAVIZ/CHARTS/temperature")
# -------------------------     LOADING PACKAGES    ----------------------------
# Data Import and Wrangling Tools
library(tidyverse)            # All things tidy
# Final plot tools
library(scales)               # Nice Scales for ggplot2
library(fontawesome)          # Icons display in ggplot2
library(ggtext)               # Markdown text support for ggplot2
library(showtext)             # Display fonts in ggplot2
library(colorspace)           # Lighten and Darken colours
#install.packages("seecolor")
library(seecolor)             # To print and view colours
library(patchwork)            # Combining plots
library(here)
rawdf <- read_csv(
here::here("sms.csv"),
skip = 2
)
View(rawdf)
